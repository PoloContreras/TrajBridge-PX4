// Generated by gencpp from file bridge-px4/GcsCmdResponse.msg
// DO NOT EDIT!


#ifndef BRIDGE-PX4_MESSAGE_GCSCMDRESPONSE_H
#define BRIDGE-PX4_MESSAGE_GCSCMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bridge-px4
{
template <class ContainerAllocator>
struct GcsCmdResponse_
{
  typedef GcsCmdResponse_<ContainerAllocator> Type;

  GcsCmdResponse_()
    : mode(0)
    , pose_init()  {
      pose_init.assign(0.0);
  }
  GcsCmdResponse_(const ContainerAllocator& _alloc)
    : mode(0)
    , pose_init()  {
  (void)_alloc;
      pose_init.assign(0.0);
  }



   typedef int64_t _mode_type;
  _mode_type mode;

   typedef boost::array<float, 13>  _pose_init_type;
  _pose_init_type pose_init;





  typedef boost::shared_ptr< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GcsCmdResponse_

typedef ::bridge-px4::GcsCmdResponse_<std::allocator<void> > GcsCmdResponse;

typedef boost::shared_ptr< ::bridge-px4::GcsCmdResponse > GcsCmdResponsePtr;
typedef boost::shared_ptr< ::bridge-px4::GcsCmdResponse const> GcsCmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bridge-px4::GcsCmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bridge-px4::GcsCmdResponse_<ContainerAllocator1> & lhs, const ::bridge-px4::GcsCmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.pose_init == rhs.pose_init;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bridge-px4::GcsCmdResponse_<ContainerAllocator1> & lhs, const ::bridge-px4::GcsCmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bridge-px4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3831fccdca0ab32888af6ef62cefaf7";
  }

  static const char* value(const ::bridge-px4::GcsCmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3831fccdca0ab32ULL;
  static const uint64_t static_value2 = 0x888af6ef62cefaf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bridge-px4/GcsCmdResponse";
  }

  static const char* value(const ::bridge-px4::GcsCmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 mode\n"
"float32[13] pose_init\n"
"\n"
;
  }

  static const char* value(const ::bridge-px4::GcsCmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.pose_init);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GcsCmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bridge-px4::GcsCmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bridge-px4::GcsCmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mode);
    s << indent << "pose_init[]" << std::endl;
    for (size_t i = 0; i < v.pose_init.size(); ++i)
    {
      s << indent << "  pose_init[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pose_init[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRIDGE-PX4_MESSAGE_GCSCMDRESPONSE_H
