// Generated by gencpp from file bridge_px4/GcsCmdRequest.msg
// DO NOT EDIT!


#ifndef BRIDGE_PX4_MESSAGE_GCSCMDREQUEST_H
#define BRIDGE_PX4_MESSAGE_GCSCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bridge_px4
{
template <class ContainerAllocator>
struct GcsCmdRequest_
{
  typedef GcsCmdRequest_<ContainerAllocator> Type;

  GcsCmdRequest_()
    : mode(0)
    , trigger(false)  {
    }
  GcsCmdRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , trigger(false)  {
  (void)_alloc;
    }



   typedef int64_t _mode_type;
  _mode_type mode;

   typedef uint8_t _trigger_type;
  _trigger_type trigger;





  typedef boost::shared_ptr< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GcsCmdRequest_

typedef ::bridge_px4::GcsCmdRequest_<std::allocator<void> > GcsCmdRequest;

typedef boost::shared_ptr< ::bridge_px4::GcsCmdRequest > GcsCmdRequestPtr;
typedef boost::shared_ptr< ::bridge_px4::GcsCmdRequest const> GcsCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bridge_px4::GcsCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bridge_px4::GcsCmdRequest_<ContainerAllocator1> & lhs, const ::bridge_px4::GcsCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.trigger == rhs.trigger;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bridge_px4::GcsCmdRequest_<ContainerAllocator1> & lhs, const ::bridge_px4::GcsCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bridge_px4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84198c51295025131dc178a2618fe32d";
  }

  static const char* value(const ::bridge_px4::GcsCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84198c5129502513ULL;
  static const uint64_t static_value2 = 0x1dc178a2618fe32dULL;
};

template<class ContainerAllocator>
struct DataType< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bridge_px4/GcsCmdRequest";
  }

  static const char* value(const ::bridge_px4::GcsCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 mode\n"
"bool trigger\n"
;
  }

  static const char* value(const ::bridge_px4::GcsCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.trigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GcsCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bridge_px4::GcsCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bridge_px4::GcsCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.mode);
    s << indent << "trigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRIDGE_PX4_MESSAGE_GCSCMDREQUEST_H
